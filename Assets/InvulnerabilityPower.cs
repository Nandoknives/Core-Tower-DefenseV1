using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.EventSystems;

public class InvulnerabilityPower : MonoBehaviour
{

    public GameObject invincibilitybeam;
    public bool isSelected = true;
    BuildManager buildManager;
    public int energyCost = 20;
    public int radiousEffect;
    public float healingRadius;
    public int healthRecover;
    public AudioSource click;
    public AudioSource error;

    public CountDownBeam countDown1;
    public Messages messageEnergy;
    //Cooldown Test
    public float cooldownTime = 5;
    private float nextFireTime = 0;

    public TMP_Text clockText;
    public bool fired = false;
    private float temporalCoolDown;


    public bool HasEnergy { get { return PlayerStats.Energy >= energyCost; } }
    // Start is called before the first frame update
    void Start()
    {
        GetComponent<InvulnerabilityPower>().enabled = false;
        buildManager = BuildManager.instance;
        fired = false;
        temporalCoolDown = cooldownTime;
        clockText.enabled = false;
    }

    // Update is called once per frame
    void Update()
    {
        isSelected = true;
        if (Time.time > nextFireTime)
        {
            if (Input.GetButtonDown("Fire1"))
            {

                if (EventSystem.current.IsPointerOverGameObject())
                {
                    return;
                }
                if (HasEnergy)
                {
                    
                    TurnOnCountB();
                    clockText.enabled = true;
                    StartCoroutine(Reeforce());
                    PlayerStats.Energy -= energyCost;
                    Debug.Log("Enegry Left: " + PlayerStats.Energy);
                    nextFireTime = Time.time + cooldownTime;
                }
                else
                {
                    error.Play();
                    NoEnergyMessage();
                    Debug.Log("No Energy!!!");
                }
            }
        }
        if (fired == true)
        {
            cooldownTime -= Time.deltaTime;
            cooldownTime = Mathf.Clamp(cooldownTime, 0f, Mathf.Infinity);
            clockText.text = Mathf.Round(cooldownTime).ToString();
            if (cooldownTime == 0f)
            {
                fired = false;
                cooldownTime = temporalCoolDown;
                clockText.enabled = false;
            }
        }
        if (Input.GetButtonDown("Fire2"))
        {
            DisableReeforce();
        }
    }
    void TurnOnCountB()
    {
        CountDownBeam c = countDown1.GetComponent<CountDownBeam>();
        c.fired2 = true;
    }
    void NoEnergyMessage()
    {
        Messages e = messageEnergy.GetComponent<Messages>();
        e.noEnergy = true;
    }
    public bool GetStateBool()
    {
        return isSelected;
    }
    public IEnumerator Reeforce()
    {

        Vector3 mousePos = Input.mousePosition;
        Ray castPoint = Camera.main.ScreenPointToRay(mousePos);
        RaycastHit hit;
        if (Physics.Raycast(castPoint, out hit, Mathf.Infinity))
        {

            GameObject beamEffect = Instantiate(invincibilitybeam, hit.point, Quaternion.identity);
            Destroy(beamEffect, 15.0f);
            while(beamEffect==true)
            {
                Collider[] colliders = Physics.OverlapSphere(hit.point, radiousEffect);
                foreach (Collider collider in colliders)
                {
                    if (collider.CompareTag("Turret"))
                    {
                        Heal(collider.transform);
                        HealE(collider.transform);
                        HealS(collider.transform);
                        Debug.Log("Healing Towers");
                    }
                    
                }
                yield return new WaitForSeconds(1f);
            }
            

        }
        isSelected = true;

    }
    void Heal(Transform enemy)
    {

        Turret c = enemy.GetComponent<Turret>();
        if (c != null)
        {
            c.HealDamage(healthRecover);
        }
    }
    void HealE(Transform enemy)
    {
        EnergyTurret e = enemy.GetComponent<EnergyTurret>();
        if (e != null)
        {
            e.HealDamage(healthRecover);
        }
    }
    void HealS(Transform enemy)
    {

        SupportTurret y = enemy.GetComponent<SupportTurret>();
        if (y != null)
        {
            y.HealDamage(healthRecover);
        }
    }

    public void EnableReeforce()
    {
        click.Play();
        buildManager.DeselectNode();
        GetComponent<InvulnerabilityPower>().enabled = true;
        isSelected = true;

    }
    public void DisableReeforce()
    {
        isSelected = false;
        GetComponent<InvulnerabilityPower>().enabled = false;

    }
    void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, radiousEffect);

    }


}